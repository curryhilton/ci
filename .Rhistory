x <- c(4, 3, 5, 2, 7)
# Provides a confidence interval for the sample mean when standard deviation is KNOWN
# User defines a vector of values in a distribution (x)
# User defines the standard deviation (s)
# User defines confidence level (c)
xbar <- mean(x)
n <- length(x)
alpha <- ((1-(c/100)))
z <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
moe <- z*(s/sqrt(n))
ci <- c(-1,1)*(xbar+z*moe)
ci
cixk <- function(x, s, c) {
xbar <- mean(x)
n <- length(x)
alpha <- ((1-(c/100)))
z <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
moe <- z*(s/sqrt(n))
ci <- c(-1,1)*(xbar+z*moe)
ci
}
cixk(x, 1, 95)
cixk <- function(x, s, c) {
xbar <- mean(x)
n <- length(x)
alpha <- ((1-(c/100)))
z <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
moe <- z*(s/sqrt(n))
cil <- (xbar-z*moe)
ciu <- (xbar+z*moe)
ci <- c(cil, ciu)
ci
}
cixk(x, 1, 95)
cixk <- function(x, s, c) {
xbar <- mean(x)
n <- length(x)
alpha <- ((1-(c/100)))
z <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
moe <- z*(s/sqrt(n))
cil <- (xbar-z*moe)
ciu <- (xbar+z*moe)
ci <- c(cil, ciu)
cat("The ", c, " % confidence interval is: ", ci)
}
cixk(x, 1, 95)
cixk <- function(x, s, c) {
xbar <- mean(x)
n <- length(x)
alpha <- ((1-(c/100)))
z <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
moe <- z*(s/sqrt(n))
cil <- (xbar-z*moe)
ciu <- (xbar+z*moe)
cat("The ", c, " % confidence interval is: ", cil, "-", ciu)
}
cixk(x, 1, 95)
cixk <- function(x, s, c) {
xbar <- mean(x)
n <- length(x)
alpha <- ((1-(c/100)))
z <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
moe <- z*(s/sqrt(n))
cil <- (xbar-z*moe)
ciu <- (xbar+z*moe)
cat("The ", c, "% confidence interval is: (", cil, "-", ciu, ")")
}
cixk(x, 1, 95)
cixk <- function(x, sigma, c) {
xbar <- mean(x)
n <- length(x)
alpha <- ((1-(c/100)))
z <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
moe <- z*(sigma/sqrt(n))
cil <- (xbar-z*moe)
ciu <- (xbar+z*moe)
cat("The ", c, "% confidence interval is: (", cil, "-", ciu, ")")
}
cixk(x, 1, 95)
cixk <- function(x, sigma, c) {
xbar <- mean(x)
n <- length(x)
alpha <- ((1-(c/100)))
z <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
moe <- z*(sigma/sqrt(n))
cil <- (xbar-z*moe)
ciu <- (xbar+z*moe)
cat("The ", c, "% confidence interval is: (", cil, ":", ciu, ")")
}
cixk(x, 1, 95)
cixu <- function(x, c) {
xbar <- mean(x)
sd <- sd(x)
n <- length(x)
df <- n-1
alpha <- ((1-(c/100)))
t <- qt(alpha/2, df = df, lower.tail = FALSE)
moe <- t*(sd/sqrt(n))
cil <- (xbar-moe)
ciu <- (xbar+moe)
cat("The ", c, "% confidence interval is: (", cil, ":", ciu, ")")
}
cixk(x, 1, 95)
cixu(x, 95)
x <- c(0.5, 0.6, 0.4, 0.7)
# Provides a tolerance interval for the population proportion
# User defines a vector of values in a distribution (x)
# User defines the population proportion (p)
# User defines confidence level (c) in whole number form...example...80, 95, 99...no decimals!
tipk <- function(x, p, c) {
n <- length(x)
alpha <- ((1-(c/100)))
z <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
moe <- z*sqrt((p*(1-p))/n)
til <- (p-moe)
tiu <- (p+moe)
cat("The ", c, "% tolerance interval for the population proportion is: (", til, ":", tiu, ")")
}
tipk(x, 0.5, 95)
# Provides a confidence interval for the population proportion when the population proportion is UNKNOWN
# User defines a vector of values in a distribution (x)
# User defines confidence level (c) in whole number form...example...80, 95, 99...no decimals!
cipu <- function(x, c) {
pbar <- mean(x)
n <- length(x)
alpha <- ((1-(c/100)))
z <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
moe <- z*sqrt((pbar*(1-pbar))/n)
cil <- (pbar-moe)
ciu <- (pbar+moe)
cat("The ", c, "% confidence interval for the population proportion is: (", cil, ":", ciu, ")")
}
cipu(x, 95)
tipk <- function(x, p, c) {
n <- length(x)
alpha <- ( (1 - (c / 100)))
z <- qnorm(alpha / 2, mean = 0, sd = 1, lower.tail = FALSE)
moe <- z * sqrt( (p * (1 - p)) / n)
til <- (p - moe)
tiu <- (p + moe)
cat("The ", c, "% tolerance interval for the population proportion is: (", til, ":", tiu, ")")
}
devtools::document()
library(roxygen)
install.packages("roxygen2")
devtools::document()
install.packages("devtools")
library(devtools)
library(roxygen2)
devtools::document()
?cixk
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?cixk
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?tipk
devtools::document()
?tipk
devtools::document()
?tipk
devtools::use_vignette("my-vignette")
install.packages("rmarkdown")
devtools::use_vignette("my-vignette")
browseVignettes("stat")
browseVignettes("ggplot2")
help(tipk)
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("curryhilton/ci")
devtools::install_github("curryhilton/ci")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
git config --global --list.
git config --global --list
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
